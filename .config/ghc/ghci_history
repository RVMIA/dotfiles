if
:doc if
f x = if even x (x`div`2)
f x = if even x (x`div`2)
f x = if even x (x`div`2) 
f x = if even x (x`div`2) else x+1
filter (==[]) [intersect a b | a <- subsequences [1..9], b <- subsequences [1..9]]
filter (=[]) [intersect a b | a <- subsequences [1..9], b <- subsequences [1..9]]
[intersect a b | a <- subsequences [1..9], b <- subsequences [1..9]]
subsequences [1..9]
subsequences [1..9]
intersect [1,2,3] [4,5,6]
:doc intersect
import Data.List
tail [1..10]
[1..10]
"4 2 5 * + 1 3 2 * + /"
:i Fractional 
:t 1/1
"4 2 5 * + 1 3 2 * + /"
b-a
b
a
b=[1,2,4,7]
a
a=[1,3,5,7,9]
A=[1,3,5,7,9]
import Data.List
subsequences [[],[1]]
subsequences [[1]]
subsequences [[1],[1]]
subsequences [1]
subsequences [1,[1]]
subsequences [1,[1]]
import Data.List
subsequences [1,2,3]
subsequences [a,b,c]
import Data.List
length $ "I am the midterm!"
t 2
t 1
t 1 = 1
t 1
t n = (+(-1)) $ (*2) $ (t(n-1))
t 1
t 2
map t [1..10]
t 1 = 1
t 1
map t [1..10]
t n = 2 * (t (n-1)) + 1
t 1 = 1
T 1 = 1
map fib [1..10]
[1..10]
[1..1]
map fib [1..10]
fib 10
a 3 1
a 2 1
a 1 2
a 3 1
a 1 1
a 1 1
a m n = a (m-1) (a m (n-1))
a 1 1
a 1 2
a 1 1
a 0 2
a 0 1
a 0 n = (n + 1)
a m n = a (m-1) (a m (n-1))
a m 0 = a (m-1) 1
a 0 n = n + 1
a 0 2
a 4 2
a 1 2
a 1 1
a m n = a (m-1) (a m (n-1))
a m 0 = a (m-1) 1
a 0 n = n + 1
:doc scanl
:doc scan
:doc foldl'
:doc foldl
 $ map (\(x,_,_) -> x) $ arr 200
minimum $ map (\(x,_,_) -> x) $ arr 200
sort $ map (\(x,_,_) -> x) $ arr 200
map (\(x,_,_) -> x) $ arr 200
map (\(x,_,_) -> x) $ arr 10
(\(x,_,_) -> x)  $ head $ arr 10
fst $ head $ arr 10
head $ arr 10
head arr 10
map fst $ arr 10
arr 10
arr 2000
length $ arr 2000
arr 2000
minimum $ arr 2000
